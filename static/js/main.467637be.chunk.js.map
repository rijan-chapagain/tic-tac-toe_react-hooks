{"version":3,"sources":["helpers.js","components/Square.js","components/Game.js","App.js","index.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c","console","log","Game","useState","Array","fill","history","stepNumber","App","ReactDOM","render","document","getElementById"],"mappings":"kMAAO,SAASA,EAAgBC,GAW5B,IAVA,IAAMC,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACnBD,EAAMC,GADa,GAC9BE,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GACpE,OAAON,EAAQI,GAGnB,OAAO,KAUXG,QAAQC,IAAIT,EANI,CACd,KAAM,KAAM,KACZ,IAAK,IAAK,IACV,KAAM,KAAM,QCtBd,IC8DeU,EAvDF,WAAO,IAAD,EACeC,mBAAS,CAACC,MAAM,GAAGC,KAAK,QADvC,mBACRC,EADQ,aAEqBH,mBAAS,IAF9B,mBAERI,EAFQ,aAGWJ,mBAASC,MAAM,GAAGC,KAAK,QAHlC,gCAIeF,oBAAS,IAJxB,6BAKAX,EAAgBc,EAAQC,KCT5BC,EAFH,kBAAM,kBAAC,EAAD,OCClBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.467637be.chunk.js","sourcesContent":["export function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n\n\nconst squares = [\n  null, null, null,\n  'X', 'X', 'X',\n  null, null, null\n];\n\nconsole.log(calculateWinner(squares));","import React from 'react';\n\nconst style = {\n    background: 'lightblue',\n    border: '2px solid darkblue',\n    fontSize: '30px',\n    fontWeight: '800',\n    cursor: 'pointer',\n    outline: 'none'\n}\n\n//props are readonly\n//Destructuring props\n// const props = {\n//     onClick: () => \"function\",\n//     value: \"x\"\n// };\n\n// const { value } = props;\n\nconst Square = ({ value, onClick }) => (\n\n    <button style={style} onClick={ onClick }>\n        { value }\n    </button>\n\n    );\n\nexport default Square;","import React, { useState } from 'react';\nimport { calculateWinner } from '../helpers';\nimport Board from './Board';\n\nconst styles = {\n    width: '200px',\n    margin: '20px auto'\n}\n\nconst Game = () => {\n    const [history, setHistory] = useState([Array(9).fill(null)]);\n    const [stepNumber, setStepNumber] = useState(0);\n    const [board, setBoard] = useState(Array(9).fill(null));\n    const [xIsNext, setXisNext] = useState(true);\n    const winner = calculateWinner(history[stepNumber]);\n\n    const handleClick = i => {\n\n        const timeInHistory = history.slice(0, stepNumber + 1);\n        const current = timeInHistory[stepNumber];\n        const squares = [...current];\n\n        // always make copy for mutation\n        // const boardCopy = [...board];\n\n        // if user click an occupied square or if game is won, return \n        if(winner || squares[i]) return;\n        // Put an X or O in the clicked square\n        squares[i] = xIsNext ? 'X' : 'O';\n        setHistory([...timeInHistory, squares]);\n        setStepNumber(timeInHistory.length)\n\n        setXisNext(!xIsNext);\n    };\n\n    const jumpTo = step => {\n        setStepNumber(step);\n        setXisNext(step % 2 === 0);\n    };\n    \n    const renderMoves = () => (\n        history.map((_step, move) => {\n            const destination = move ? `Go to move#${move}` : ' Go to start';\n            return (\n                <li key={move}>\n                    <button onClick={() => jumpTo(move)}>{destination}</button>\n                </li>\n            );\n        })\n    );\n\n    return (\n        // it can only return one tag co wrap in fragment\n        // fragment is empty tag \n        <>\n            <Board squares={history[stepNumber]} onClick={handleClick} />\n            <div style={styles}>\n                <p>{winner ? 'Winner: ' + winner: 'Next Player: ' + (xIsNext ? 'X' : 'O')}</p>\n                {renderMoves()}\n            </div>\n        </>\n    );\n}\n\nexport default Game;","import React from 'react';\nimport Game from './components/Game';\n\nconst App = () => <Game />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}